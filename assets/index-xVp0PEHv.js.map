{"version":3,"file":"index-xVp0PEHv.js","sources":["../../node_modules/html-to-image/es/util.js","../../node_modules/html-to-image/es/clone-pseudos.js","../../node_modules/html-to-image/es/mimes.js","../../node_modules/html-to-image/es/dataurl.js","../../node_modules/html-to-image/es/clone-node.js","../../node_modules/html-to-image/es/embed-resources.js","../../node_modules/html-to-image/es/embed-images.js","../../node_modules/html-to-image/es/apply-style.js","../../node_modules/html-to-image/es/embed-webfonts.js","../../node_modules/html-to-image/es/index.js"],"sourcesContent":["export function resolveUrl(url, baseUrl) {\n    // url is absolute already\n    if (url.match(/^[a-z]+:\\/\\//i)) {\n        return url;\n    }\n    // url is absolute already, without protocol\n    if (url.match(/^\\/\\//)) {\n        return window.location.protocol + url;\n    }\n    // dataURI, mailto:, tel:, etc.\n    if (url.match(/^[a-z]+:/i)) {\n        return url;\n    }\n    const doc = document.implementation.createHTMLDocument();\n    const base = doc.createElement('base');\n    const a = doc.createElement('a');\n    doc.head.appendChild(base);\n    doc.body.appendChild(a);\n    if (baseUrl) {\n        base.href = baseUrl;\n    }\n    a.href = url;\n    return a.href;\n}\nexport const uuid = (() => {\n    // generate uuid for className of pseudo elements.\n    // We should not use GUIDs, otherwise pseudo elements sometimes cannot be captured.\n    let counter = 0;\n    // ref: http://stackoverflow.com/a/6248722/2519373\n    const random = () => \n    // eslint-disable-next-line no-bitwise\n    `0000${((Math.random() * 36 ** 4) << 0).toString(36)}`.slice(-4);\n    return () => {\n        counter += 1;\n        return `u${random()}${counter}`;\n    };\n})();\nexport function delay(ms) {\n    return (args) => new Promise((resolve) => {\n        setTimeout(() => resolve(args), ms);\n    });\n}\nexport function toArray(arrayLike) {\n    const arr = [];\n    for (let i = 0, l = arrayLike.length; i < l; i++) {\n        arr.push(arrayLike[i]);\n    }\n    return arr;\n}\nlet styleProps = null;\nexport function getStyleProperties(options = {}) {\n    if (styleProps) {\n        return styleProps;\n    }\n    if (options.includeStyleProperties) {\n        styleProps = options.includeStyleProperties;\n        return styleProps;\n    }\n    styleProps = toArray(window.getComputedStyle(document.documentElement));\n    return styleProps;\n}\nfunction px(node, styleProperty) {\n    const win = node.ownerDocument.defaultView || window;\n    const val = win.getComputedStyle(node).getPropertyValue(styleProperty);\n    return val ? parseFloat(val.replace('px', '')) : 0;\n}\nfunction getNodeWidth(node) {\n    const leftBorder = px(node, 'border-left-width');\n    const rightBorder = px(node, 'border-right-width');\n    return node.clientWidth + leftBorder + rightBorder;\n}\nfunction getNodeHeight(node) {\n    const topBorder = px(node, 'border-top-width');\n    const bottomBorder = px(node, 'border-bottom-width');\n    return node.clientHeight + topBorder + bottomBorder;\n}\nexport function getImageSize(targetNode, options = {}) {\n    const width = options.width || getNodeWidth(targetNode);\n    const height = options.height || getNodeHeight(targetNode);\n    return { width, height };\n}\nexport function getPixelRatio() {\n    let ratio;\n    let FINAL_PROCESS;\n    try {\n        FINAL_PROCESS = process;\n    }\n    catch (e) {\n        // pass\n    }\n    const val = FINAL_PROCESS && FINAL_PROCESS.env\n        ? FINAL_PROCESS.env.devicePixelRatio\n        : null;\n    if (val) {\n        ratio = parseInt(val, 10);\n        if (Number.isNaN(ratio)) {\n            ratio = 1;\n        }\n    }\n    return ratio || window.devicePixelRatio || 1;\n}\n// @see https://developer.mozilla.org/en-US/docs/Web/HTML/Element/canvas#maximum_canvas_size\nconst canvasDimensionLimit = 16384;\nexport function checkCanvasDimensions(canvas) {\n    if (canvas.width > canvasDimensionLimit ||\n        canvas.height > canvasDimensionLimit) {\n        if (canvas.width > canvasDimensionLimit &&\n            canvas.height > canvasDimensionLimit) {\n            if (canvas.width > canvas.height) {\n                canvas.height *= canvasDimensionLimit / canvas.width;\n                canvas.width = canvasDimensionLimit;\n            }\n            else {\n                canvas.width *= canvasDimensionLimit / canvas.height;\n                canvas.height = canvasDimensionLimit;\n            }\n        }\n        else if (canvas.width > canvasDimensionLimit) {\n            canvas.height *= canvasDimensionLimit / canvas.width;\n            canvas.width = canvasDimensionLimit;\n        }\n        else {\n            canvas.width *= canvasDimensionLimit / canvas.height;\n            canvas.height = canvasDimensionLimit;\n        }\n    }\n}\nexport function canvasToBlob(canvas, options = {}) {\n    if (canvas.toBlob) {\n        return new Promise((resolve) => {\n            canvas.toBlob(resolve, options.type ? options.type : 'image/png', options.quality ? options.quality : 1);\n        });\n    }\n    return new Promise((resolve) => {\n        const binaryString = window.atob(canvas\n            .toDataURL(options.type ? options.type : undefined, options.quality ? options.quality : undefined)\n            .split(',')[1]);\n        const len = binaryString.length;\n        const binaryArray = new Uint8Array(len);\n        for (let i = 0; i < len; i += 1) {\n            binaryArray[i] = binaryString.charCodeAt(i);\n        }\n        resolve(new Blob([binaryArray], {\n            type: options.type ? options.type : 'image/png',\n        }));\n    });\n}\nexport function createImage(url) {\n    return new Promise((resolve, reject) => {\n        const img = new Image();\n        img.onload = () => {\n            img.decode().then(() => {\n                requestAnimationFrame(() => resolve(img));\n            });\n        };\n        img.onerror = reject;\n        img.crossOrigin = 'anonymous';\n        img.decoding = 'async';\n        img.src = url;\n    });\n}\nexport async function svgToDataURL(svg) {\n    return Promise.resolve()\n        .then(() => new XMLSerializer().serializeToString(svg))\n        .then(encodeURIComponent)\n        .then((html) => `data:image/svg+xml;charset=utf-8,${html}`);\n}\nexport async function nodeToDataURL(node, width, height) {\n    const xmlns = 'http://www.w3.org/2000/svg';\n    const svg = document.createElementNS(xmlns, 'svg');\n    const foreignObject = document.createElementNS(xmlns, 'foreignObject');\n    svg.setAttribute('width', `${width}`);\n    svg.setAttribute('height', `${height}`);\n    svg.setAttribute('viewBox', `0 0 ${width} ${height}`);\n    foreignObject.setAttribute('width', '100%');\n    foreignObject.setAttribute('height', '100%');\n    foreignObject.setAttribute('x', '0');\n    foreignObject.setAttribute('y', '0');\n    foreignObject.setAttribute('externalResourcesRequired', 'true');\n    svg.appendChild(foreignObject);\n    foreignObject.appendChild(node);\n    return svgToDataURL(svg);\n}\nexport const isInstanceOfElement = (node, instance) => {\n    if (node instanceof instance)\n        return true;\n    const nodePrototype = Object.getPrototypeOf(node);\n    if (nodePrototype === null)\n        return false;\n    return (nodePrototype.constructor.name === instance.name ||\n        isInstanceOfElement(nodePrototype, instance));\n};\n//# sourceMappingURL=util.js.map","import { uuid, getStyleProperties } from './util';\nfunction formatCSSText(style) {\n    const content = style.getPropertyValue('content');\n    return `${style.cssText} content: '${content.replace(/'|\"/g, '')}';`;\n}\nfunction formatCSSProperties(style, options) {\n    return getStyleProperties(options)\n        .map((name) => {\n        const value = style.getPropertyValue(name);\n        const priority = style.getPropertyPriority(name);\n        return `${name}: ${value}${priority ? ' !important' : ''};`;\n    })\n        .join(' ');\n}\nfunction getPseudoElementStyle(className, pseudo, style, options) {\n    const selector = `.${className}:${pseudo}`;\n    const cssText = style.cssText\n        ? formatCSSText(style)\n        : formatCSSProperties(style, options);\n    return document.createTextNode(`${selector}{${cssText}}`);\n}\nfunction clonePseudoElement(nativeNode, clonedNode, pseudo, options) {\n    const style = window.getComputedStyle(nativeNode, pseudo);\n    const content = style.getPropertyValue('content');\n    if (content === '' || content === 'none') {\n        return;\n    }\n    const className = uuid();\n    try {\n        clonedNode.className = `${clonedNode.className} ${className}`;\n    }\n    catch (err) {\n        return;\n    }\n    const styleElement = document.createElement('style');\n    styleElement.appendChild(getPseudoElementStyle(className, pseudo, style, options));\n    clonedNode.appendChild(styleElement);\n}\nexport function clonePseudoElements(nativeNode, clonedNode, options) {\n    clonePseudoElement(nativeNode, clonedNode, ':before', options);\n    clonePseudoElement(nativeNode, clonedNode, ':after', options);\n}\n//# sourceMappingURL=clone-pseudos.js.map","const WOFF = 'application/font-woff';\nconst JPEG = 'image/jpeg';\nconst mimes = {\n    woff: WOFF,\n    woff2: WOFF,\n    ttf: 'application/font-truetype',\n    eot: 'application/vnd.ms-fontobject',\n    png: 'image/png',\n    jpg: JPEG,\n    jpeg: JPEG,\n    gif: 'image/gif',\n    tiff: 'image/tiff',\n    svg: 'image/svg+xml',\n    webp: 'image/webp',\n};\nfunction getExtension(url) {\n    const match = /\\.([^./]*?)$/g.exec(url);\n    return match ? match[1] : '';\n}\nexport function getMimeType(url) {\n    const extension = getExtension(url).toLowerCase();\n    return mimes[extension] || '';\n}\n//# sourceMappingURL=mimes.js.map","function getContentFromDataUrl(dataURL) {\n    return dataURL.split(/,/)[1];\n}\nexport function isDataUrl(url) {\n    return url.search(/^(data:)/) !== -1;\n}\nexport function makeDataUrl(content, mimeType) {\n    return `data:${mimeType};base64,${content}`;\n}\nexport async function fetchAsDataURL(url, init, process) {\n    const res = await fetch(url, init);\n    if (res.status === 404) {\n        throw new Error(`Resource \"${res.url}\" not found`);\n    }\n    const blob = await res.blob();\n    return new Promise((resolve, reject) => {\n        const reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = () => {\n            try {\n                resolve(process({ res, result: reader.result }));\n            }\n            catch (error) {\n                reject(error);\n            }\n        };\n        reader.readAsDataURL(blob);\n    });\n}\nconst cache = {};\nfunction getCacheKey(url, contentType, includeQueryParams) {\n    let key = url.replace(/\\?.*/, '');\n    if (includeQueryParams) {\n        key = url;\n    }\n    // font resource\n    if (/ttf|otf|eot|woff2?/i.test(key)) {\n        key = key.replace(/.*\\//, '');\n    }\n    return contentType ? `[${contentType}]${key}` : key;\n}\nexport async function resourceToDataURL(resourceUrl, contentType, options) {\n    const cacheKey = getCacheKey(resourceUrl, contentType, options.includeQueryParams);\n    if (cache[cacheKey] != null) {\n        return cache[cacheKey];\n    }\n    // ref: https://developer.mozilla.org/en/docs/Web/API/XMLHttpRequest/Using_XMLHttpRequest#Bypassing_the_cache\n    if (options.cacheBust) {\n        // eslint-disable-next-line no-param-reassign\n        resourceUrl += (/\\?/.test(resourceUrl) ? '&' : '?') + new Date().getTime();\n    }\n    let dataURL;\n    try {\n        const content = await fetchAsDataURL(resourceUrl, options.fetchRequestInit, ({ res, result }) => {\n            if (!contentType) {\n                // eslint-disable-next-line no-param-reassign\n                contentType = res.headers.get('Content-Type') || '';\n            }\n            return getContentFromDataUrl(result);\n        });\n        dataURL = makeDataUrl(content, contentType);\n    }\n    catch (error) {\n        dataURL = options.imagePlaceholder || '';\n        let msg = `Failed to fetch resource: ${resourceUrl}`;\n        if (error) {\n            msg = typeof error === 'string' ? error : error.message;\n        }\n        if (msg) {\n            console.warn(msg);\n        }\n    }\n    cache[cacheKey] = dataURL;\n    return dataURL;\n}\n//# sourceMappingURL=dataurl.js.map","import { clonePseudoElements } from './clone-pseudos';\nimport { createImage, toArray, isInstanceOfElement, getStyleProperties, } from './util';\nimport { getMimeType } from './mimes';\nimport { resourceToDataURL } from './dataurl';\nasync function cloneCanvasElement(canvas) {\n    const dataURL = canvas.toDataURL();\n    if (dataURL === 'data:,') {\n        return canvas.cloneNode(false);\n    }\n    return createImage(dataURL);\n}\nasync function cloneVideoElement(video, options) {\n    if (video.currentSrc) {\n        const canvas = document.createElement('canvas');\n        const ctx = canvas.getContext('2d');\n        canvas.width = video.clientWidth;\n        canvas.height = video.clientHeight;\n        ctx === null || ctx === void 0 ? void 0 : ctx.drawImage(video, 0, 0, canvas.width, canvas.height);\n        const dataURL = canvas.toDataURL();\n        return createImage(dataURL);\n    }\n    const poster = video.poster;\n    const contentType = getMimeType(poster);\n    const dataURL = await resourceToDataURL(poster, contentType, options);\n    return createImage(dataURL);\n}\nasync function cloneIFrameElement(iframe, options) {\n    var _a;\n    try {\n        if ((_a = iframe === null || iframe === void 0 ? void 0 : iframe.contentDocument) === null || _a === void 0 ? void 0 : _a.body) {\n            return (await cloneNode(iframe.contentDocument.body, options, true));\n        }\n    }\n    catch (_b) {\n        // Failed to clone iframe\n    }\n    return iframe.cloneNode(false);\n}\nasync function cloneSingleNode(node, options) {\n    if (isInstanceOfElement(node, HTMLCanvasElement)) {\n        return cloneCanvasElement(node);\n    }\n    if (isInstanceOfElement(node, HTMLVideoElement)) {\n        return cloneVideoElement(node, options);\n    }\n    if (isInstanceOfElement(node, HTMLIFrameElement)) {\n        return cloneIFrameElement(node, options);\n    }\n    return node.cloneNode(isSVGElement(node));\n}\nconst isSlotElement = (node) => node.tagName != null && node.tagName.toUpperCase() === 'SLOT';\nconst isSVGElement = (node) => node.tagName != null && node.tagName.toUpperCase() === 'SVG';\nasync function cloneChildren(nativeNode, clonedNode, options) {\n    var _a, _b;\n    if (isSVGElement(clonedNode)) {\n        return clonedNode;\n    }\n    let children = [];\n    if (isSlotElement(nativeNode) && nativeNode.assignedNodes) {\n        children = toArray(nativeNode.assignedNodes());\n    }\n    else if (isInstanceOfElement(nativeNode, HTMLIFrameElement) &&\n        ((_a = nativeNode.contentDocument) === null || _a === void 0 ? void 0 : _a.body)) {\n        children = toArray(nativeNode.contentDocument.body.childNodes);\n    }\n    else {\n        children = toArray(((_b = nativeNode.shadowRoot) !== null && _b !== void 0 ? _b : nativeNode).childNodes);\n    }\n    if (children.length === 0 ||\n        isInstanceOfElement(nativeNode, HTMLVideoElement)) {\n        return clonedNode;\n    }\n    await children.reduce((deferred, child) => deferred\n        .then(() => cloneNode(child, options))\n        .then((clonedChild) => {\n        if (clonedChild) {\n            clonedNode.appendChild(clonedChild);\n        }\n    }), Promise.resolve());\n    return clonedNode;\n}\nfunction cloneCSSStyle(nativeNode, clonedNode, options) {\n    const targetStyle = clonedNode.style;\n    if (!targetStyle) {\n        return;\n    }\n    const sourceStyle = window.getComputedStyle(nativeNode);\n    if (sourceStyle.cssText) {\n        targetStyle.cssText = sourceStyle.cssText;\n        targetStyle.transformOrigin = sourceStyle.transformOrigin;\n    }\n    else {\n        getStyleProperties(options).forEach((name) => {\n            let value = sourceStyle.getPropertyValue(name);\n            if (name === 'font-size' && value.endsWith('px')) {\n                const reducedFont = Math.floor(parseFloat(value.substring(0, value.length - 2))) - 0.1;\n                value = `${reducedFont}px`;\n            }\n            if (isInstanceOfElement(nativeNode, HTMLIFrameElement) &&\n                name === 'display' &&\n                value === 'inline') {\n                value = 'block';\n            }\n            if (name === 'd' && clonedNode.getAttribute('d')) {\n                value = `path(${clonedNode.getAttribute('d')})`;\n            }\n            targetStyle.setProperty(name, value, sourceStyle.getPropertyPriority(name));\n        });\n    }\n}\nfunction cloneInputValue(nativeNode, clonedNode) {\n    if (isInstanceOfElement(nativeNode, HTMLTextAreaElement)) {\n        clonedNode.innerHTML = nativeNode.value;\n    }\n    if (isInstanceOfElement(nativeNode, HTMLInputElement)) {\n        clonedNode.setAttribute('value', nativeNode.value);\n    }\n}\nfunction cloneSelectValue(nativeNode, clonedNode) {\n    if (isInstanceOfElement(nativeNode, HTMLSelectElement)) {\n        const clonedSelect = clonedNode;\n        const selectedOption = Array.from(clonedSelect.children).find((child) => nativeNode.value === child.getAttribute('value'));\n        if (selectedOption) {\n            selectedOption.setAttribute('selected', '');\n        }\n    }\n}\nfunction decorate(nativeNode, clonedNode, options) {\n    if (isInstanceOfElement(clonedNode, Element)) {\n        cloneCSSStyle(nativeNode, clonedNode, options);\n        clonePseudoElements(nativeNode, clonedNode, options);\n        cloneInputValue(nativeNode, clonedNode);\n        cloneSelectValue(nativeNode, clonedNode);\n    }\n    return clonedNode;\n}\nasync function ensureSVGSymbols(clone, options) {\n    const uses = clone.querySelectorAll ? clone.querySelectorAll('use') : [];\n    if (uses.length === 0) {\n        return clone;\n    }\n    const processedDefs = {};\n    for (let i = 0; i < uses.length; i++) {\n        const use = uses[i];\n        const id = use.getAttribute('xlink:href');\n        if (id) {\n            const exist = clone.querySelector(id);\n            const definition = document.querySelector(id);\n            if (!exist && definition && !processedDefs[id]) {\n                // eslint-disable-next-line no-await-in-loop\n                processedDefs[id] = (await cloneNode(definition, options, true));\n            }\n        }\n    }\n    const nodes = Object.values(processedDefs);\n    if (nodes.length) {\n        const ns = 'http://www.w3.org/1999/xhtml';\n        const svg = document.createElementNS(ns, 'svg');\n        svg.setAttribute('xmlns', ns);\n        svg.style.position = 'absolute';\n        svg.style.width = '0';\n        svg.style.height = '0';\n        svg.style.overflow = 'hidden';\n        svg.style.display = 'none';\n        const defs = document.createElementNS(ns, 'defs');\n        svg.appendChild(defs);\n        for (let i = 0; i < nodes.length; i++) {\n            defs.appendChild(nodes[i]);\n        }\n        clone.appendChild(svg);\n    }\n    return clone;\n}\nexport async function cloneNode(node, options, isRoot) {\n    if (!isRoot && options.filter && !options.filter(node)) {\n        return null;\n    }\n    return Promise.resolve(node)\n        .then((clonedNode) => cloneSingleNode(clonedNode, options))\n        .then((clonedNode) => cloneChildren(node, clonedNode, options))\n        .then((clonedNode) => decorate(node, clonedNode, options))\n        .then((clonedNode) => ensureSVGSymbols(clonedNode, options));\n}\n//# sourceMappingURL=clone-node.js.map","import { resolveUrl } from './util';\nimport { getMimeType } from './mimes';\nimport { isDataUrl, makeDataUrl, resourceToDataURL } from './dataurl';\nconst URL_REGEX = /url\\((['\"]?)([^'\"]+?)\\1\\)/g;\nconst URL_WITH_FORMAT_REGEX = /url\\([^)]+\\)\\s*format\\(([\"']?)([^\"']+)\\1\\)/g;\nconst FONT_SRC_REGEX = /src:\\s*(?:url\\([^)]+\\)\\s*format\\([^)]+\\)[,;]\\s*)+/g;\nfunction toRegex(url) {\n    // eslint-disable-next-line no-useless-escape\n    const escaped = url.replace(/([.*+?^${}()|\\[\\]\\/\\\\])/g, '\\\\$1');\n    return new RegExp(`(url\\\\(['\"]?)(${escaped})(['\"]?\\\\))`, 'g');\n}\nexport function parseURLs(cssText) {\n    const urls = [];\n    cssText.replace(URL_REGEX, (raw, quotation, url) => {\n        urls.push(url);\n        return raw;\n    });\n    return urls.filter((url) => !isDataUrl(url));\n}\nexport async function embed(cssText, resourceURL, baseURL, options, getContentFromUrl) {\n    try {\n        const resolvedURL = baseURL ? resolveUrl(resourceURL, baseURL) : resourceURL;\n        const contentType = getMimeType(resourceURL);\n        let dataURL;\n        if (getContentFromUrl) {\n            const content = await getContentFromUrl(resolvedURL);\n            dataURL = makeDataUrl(content, contentType);\n        }\n        else {\n            dataURL = await resourceToDataURL(resolvedURL, contentType, options);\n        }\n        return cssText.replace(toRegex(resourceURL), `$1${dataURL}$3`);\n    }\n    catch (error) {\n        // pass\n    }\n    return cssText;\n}\nfunction filterPreferredFontFormat(str, { preferredFontFormat }) {\n    return !preferredFontFormat\n        ? str\n        : str.replace(FONT_SRC_REGEX, (match) => {\n            // eslint-disable-next-line no-constant-condition\n            while (true) {\n                const [src, , format] = URL_WITH_FORMAT_REGEX.exec(match) || [];\n                if (!format) {\n                    return '';\n                }\n                if (format === preferredFontFormat) {\n                    return `src: ${src};`;\n                }\n            }\n        });\n}\nexport function shouldEmbed(url) {\n    return url.search(URL_REGEX) !== -1;\n}\nexport async function embedResources(cssText, baseUrl, options) {\n    if (!shouldEmbed(cssText)) {\n        return cssText;\n    }\n    const filteredCSSText = filterPreferredFontFormat(cssText, options);\n    const urls = parseURLs(filteredCSSText);\n    return urls.reduce((deferred, url) => deferred.then((css) => embed(css, url, baseUrl, options)), Promise.resolve(filteredCSSText));\n}\n//# sourceMappingURL=embed-resources.js.map","import { embedResources } from './embed-resources';\nimport { toArray, isInstanceOfElement } from './util';\nimport { isDataUrl, resourceToDataURL } from './dataurl';\nimport { getMimeType } from './mimes';\nasync function embedProp(propName, node, options) {\n    var _a;\n    const propValue = (_a = node.style) === null || _a === void 0 ? void 0 : _a.getPropertyValue(propName);\n    if (propValue) {\n        const cssString = await embedResources(propValue, null, options);\n        node.style.setProperty(propName, cssString, node.style.getPropertyPriority(propName));\n        return true;\n    }\n    return false;\n}\nasync function embedBackground(clonedNode, options) {\n    ;\n    (await embedProp('background', clonedNode, options)) ||\n        (await embedProp('background-image', clonedNode, options));\n    (await embedProp('mask', clonedNode, options)) ||\n        (await embedProp('-webkit-mask', clonedNode, options)) ||\n        (await embedProp('mask-image', clonedNode, options)) ||\n        (await embedProp('-webkit-mask-image', clonedNode, options));\n}\nasync function embedImageNode(clonedNode, options) {\n    const isImageElement = isInstanceOfElement(clonedNode, HTMLImageElement);\n    if (!(isImageElement && !isDataUrl(clonedNode.src)) &&\n        !(isInstanceOfElement(clonedNode, SVGImageElement) &&\n            !isDataUrl(clonedNode.href.baseVal))) {\n        return;\n    }\n    const url = isImageElement ? clonedNode.src : clonedNode.href.baseVal;\n    const dataURL = await resourceToDataURL(url, getMimeType(url), options);\n    await new Promise((resolve, reject) => {\n        clonedNode.onload = resolve;\n        clonedNode.onerror = options.onImageErrorHandler\n            ? (...attributes) => {\n                try {\n                    resolve(options.onImageErrorHandler(...attributes));\n                }\n                catch (error) {\n                    reject(error);\n                }\n            }\n            : reject;\n        const image = clonedNode;\n        if (image.decode) {\n            image.decode = resolve;\n        }\n        if (image.loading === 'lazy') {\n            image.loading = 'eager';\n        }\n        if (isImageElement) {\n            clonedNode.srcset = '';\n            clonedNode.src = dataURL;\n        }\n        else {\n            clonedNode.href.baseVal = dataURL;\n        }\n    });\n}\nasync function embedChildren(clonedNode, options) {\n    const children = toArray(clonedNode.childNodes);\n    const deferreds = children.map((child) => embedImages(child, options));\n    await Promise.all(deferreds).then(() => clonedNode);\n}\nexport async function embedImages(clonedNode, options) {\n    if (isInstanceOfElement(clonedNode, Element)) {\n        await embedBackground(clonedNode, options);\n        await embedImageNode(clonedNode, options);\n        await embedChildren(clonedNode, options);\n    }\n}\n//# sourceMappingURL=embed-images.js.map","export function applyStyle(node, options) {\n    const { style } = node;\n    if (options.backgroundColor) {\n        style.backgroundColor = options.backgroundColor;\n    }\n    if (options.width) {\n        style.width = `${options.width}px`;\n    }\n    if (options.height) {\n        style.height = `${options.height}px`;\n    }\n    const manual = options.style;\n    if (manual != null) {\n        Object.keys(manual).forEach((key) => {\n            style[key] = manual[key];\n        });\n    }\n    return node;\n}\n//# sourceMappingURL=apply-style.js.map","import { toArray } from './util';\nimport { fetchAsDataURL } from './dataurl';\nimport { shouldEmbed, embedResources } from './embed-resources';\nconst cssFetchCache = {};\nasync function fetchCSS(url) {\n    let cache = cssFetchCache[url];\n    if (cache != null) {\n        return cache;\n    }\n    const res = await fetch(url);\n    const cssText = await res.text();\n    cache = { url, cssText };\n    cssFetchCache[url] = cache;\n    return cache;\n}\nasync function embedFonts(data, options) {\n    let cssText = data.cssText;\n    const regexUrl = /url\\([\"']?([^\"')]+)[\"']?\\)/g;\n    const fontLocs = cssText.match(/url\\([^)]+\\)/g) || [];\n    const loadFonts = fontLocs.map(async (loc) => {\n        let url = loc.replace(regexUrl, '$1');\n        if (!url.startsWith('https://')) {\n            url = new URL(url, data.url).href;\n        }\n        return fetchAsDataURL(url, options.fetchRequestInit, ({ result }) => {\n            cssText = cssText.replace(loc, `url(${result})`);\n            return [loc, result];\n        });\n    });\n    return Promise.all(loadFonts).then(() => cssText);\n}\nfunction parseCSS(source) {\n    if (source == null) {\n        return [];\n    }\n    const result = [];\n    const commentsRegex = /(\\/\\*[\\s\\S]*?\\*\\/)/gi;\n    // strip out comments\n    let cssText = source.replace(commentsRegex, '');\n    // eslint-disable-next-line prefer-regex-literals\n    const keyframesRegex = new RegExp('((@.*?keyframes [\\\\s\\\\S]*?){([\\\\s\\\\S]*?}\\\\s*?)})', 'gi');\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        const matches = keyframesRegex.exec(cssText);\n        if (matches === null) {\n            break;\n        }\n        result.push(matches[0]);\n    }\n    cssText = cssText.replace(keyframesRegex, '');\n    const importRegex = /@import[\\s\\S]*?url\\([^)]*\\)[\\s\\S]*?;/gi;\n    // to match css & media queries together\n    const combinedCSSRegex = '((\\\\s*?(?:\\\\/\\\\*[\\\\s\\\\S]*?\\\\*\\\\/)?\\\\s*?@media[\\\\s\\\\S]' +\n        '*?){([\\\\s\\\\S]*?)}\\\\s*?})|(([\\\\s\\\\S]*?){([\\\\s\\\\S]*?)})';\n    // unified regex\n    const unifiedRegex = new RegExp(combinedCSSRegex, 'gi');\n    // eslint-disable-next-line no-constant-condition\n    while (true) {\n        let matches = importRegex.exec(cssText);\n        if (matches === null) {\n            matches = unifiedRegex.exec(cssText);\n            if (matches === null) {\n                break;\n            }\n            else {\n                importRegex.lastIndex = unifiedRegex.lastIndex;\n            }\n        }\n        else {\n            unifiedRegex.lastIndex = importRegex.lastIndex;\n        }\n        result.push(matches[0]);\n    }\n    return result;\n}\nasync function getCSSRules(styleSheets, options) {\n    const ret = [];\n    const deferreds = [];\n    // First loop inlines imports\n    styleSheets.forEach((sheet) => {\n        if ('cssRules' in sheet) {\n            try {\n                toArray(sheet.cssRules || []).forEach((item, index) => {\n                    if (item.type === CSSRule.IMPORT_RULE) {\n                        let importIndex = index + 1;\n                        const url = item.href;\n                        const deferred = fetchCSS(url)\n                            .then((metadata) => embedFonts(metadata, options))\n                            .then((cssText) => parseCSS(cssText).forEach((rule) => {\n                            try {\n                                sheet.insertRule(rule, rule.startsWith('@import')\n                                    ? (importIndex += 1)\n                                    : sheet.cssRules.length);\n                            }\n                            catch (error) {\n                                console.error('Error inserting rule from remote css', {\n                                    rule,\n                                    error,\n                                });\n                            }\n                        }))\n                            .catch((e) => {\n                            console.error('Error loading remote css', e.toString());\n                        });\n                        deferreds.push(deferred);\n                    }\n                });\n            }\n            catch (e) {\n                const inline = styleSheets.find((a) => a.href == null) || document.styleSheets[0];\n                if (sheet.href != null) {\n                    deferreds.push(fetchCSS(sheet.href)\n                        .then((metadata) => embedFonts(metadata, options))\n                        .then((cssText) => parseCSS(cssText).forEach((rule) => {\n                        inline.insertRule(rule, inline.cssRules.length);\n                    }))\n                        .catch((err) => {\n                        console.error('Error loading remote stylesheet', err);\n                    }));\n                }\n                console.error('Error inlining remote css file', e);\n            }\n        }\n    });\n    return Promise.all(deferreds).then(() => {\n        // Second loop parses rules\n        styleSheets.forEach((sheet) => {\n            if ('cssRules' in sheet) {\n                try {\n                    toArray(sheet.cssRules || []).forEach((item) => {\n                        ret.push(item);\n                    });\n                }\n                catch (e) {\n                    console.error(`Error while reading CSS rules from ${sheet.href}`, e);\n                }\n            }\n        });\n        return ret;\n    });\n}\nfunction getWebFontRules(cssRules) {\n    return cssRules\n        .filter((rule) => rule.type === CSSRule.FONT_FACE_RULE)\n        .filter((rule) => shouldEmbed(rule.style.getPropertyValue('src')));\n}\nasync function parseWebFontRules(node, options) {\n    if (node.ownerDocument == null) {\n        throw new Error('Provided element is not within a Document');\n    }\n    const styleSheets = toArray(node.ownerDocument.styleSheets);\n    const cssRules = await getCSSRules(styleSheets, options);\n    return getWebFontRules(cssRules);\n}\nfunction normalizeFontFamily(font) {\n    return font.trim().replace(/[\"']/g, '');\n}\nfunction getUsedFonts(node) {\n    const fonts = new Set();\n    function traverse(node) {\n        const fontFamily = node.style.fontFamily || getComputedStyle(node).fontFamily;\n        fontFamily.split(',').forEach((font) => {\n            fonts.add(normalizeFontFamily(font));\n        });\n        Array.from(node.children).forEach((child) => {\n            if (child instanceof HTMLElement) {\n                traverse(child);\n            }\n        });\n    }\n    traverse(node);\n    return fonts;\n}\nexport async function getWebFontCSS(node, options) {\n    const rules = await parseWebFontRules(node, options);\n    const usedFonts = getUsedFonts(node);\n    const cssTexts = await Promise.all(rules\n        .filter((rule) => usedFonts.has(normalizeFontFamily(rule.style.fontFamily)))\n        .map((rule) => {\n        const baseUrl = rule.parentStyleSheet\n            ? rule.parentStyleSheet.href\n            : null;\n        return embedResources(rule.cssText, baseUrl, options);\n    }));\n    return cssTexts.join('\\n');\n}\nexport async function embedWebFonts(clonedNode, options) {\n    const cssText = options.fontEmbedCSS != null\n        ? options.fontEmbedCSS\n        : options.skipFonts\n            ? null\n            : await getWebFontCSS(clonedNode, options);\n    if (cssText) {\n        const styleNode = document.createElement('style');\n        const sytleContent = document.createTextNode(cssText);\n        styleNode.appendChild(sytleContent);\n        if (clonedNode.firstChild) {\n            clonedNode.insertBefore(styleNode, clonedNode.firstChild);\n        }\n        else {\n            clonedNode.appendChild(styleNode);\n        }\n    }\n}\n//# sourceMappingURL=embed-webfonts.js.map","import { cloneNode } from './clone-node';\nimport { embedImages } from './embed-images';\nimport { applyStyle } from './apply-style';\nimport { embedWebFonts, getWebFontCSS } from './embed-webfonts';\nimport { getImageSize, getPixelRatio, createImage, canvasToBlob, nodeToDataURL, checkCanvasDimensions, } from './util';\nexport async function toSvg(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const clonedNode = (await cloneNode(node, options, true));\n    await embedWebFonts(clonedNode, options);\n    await embedImages(clonedNode, options);\n    applyStyle(clonedNode, options);\n    const datauri = await nodeToDataURL(clonedNode, width, height);\n    return datauri;\n}\nexport async function toCanvas(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const svg = await toSvg(node, options);\n    const img = await createImage(svg);\n    const canvas = document.createElement('canvas');\n    const context = canvas.getContext('2d');\n    const ratio = options.pixelRatio || getPixelRatio();\n    const canvasWidth = options.canvasWidth || width;\n    const canvasHeight = options.canvasHeight || height;\n    canvas.width = canvasWidth * ratio;\n    canvas.height = canvasHeight * ratio;\n    if (!options.skipAutoScale) {\n        checkCanvasDimensions(canvas);\n    }\n    canvas.style.width = `${canvasWidth}`;\n    canvas.style.height = `${canvasHeight}`;\n    if (options.backgroundColor) {\n        context.fillStyle = options.backgroundColor;\n        context.fillRect(0, 0, canvas.width, canvas.height);\n    }\n    context.drawImage(img, 0, 0, canvas.width, canvas.height);\n    return canvas;\n}\nexport async function toPixelData(node, options = {}) {\n    const { width, height } = getImageSize(node, options);\n    const canvas = await toCanvas(node, options);\n    const ctx = canvas.getContext('2d');\n    return ctx.getImageData(0, 0, width, height).data;\n}\nexport async function toPng(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    return canvas.toDataURL();\n}\nexport async function toJpeg(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    return canvas.toDataURL('image/jpeg', options.quality || 1);\n}\nexport async function toBlob(node, options = {}) {\n    const canvas = await toCanvas(node, options);\n    const blob = await canvasToBlob(canvas);\n    return blob;\n}\nexport async function getFontEmbedCSS(node, options = {}) {\n    return getWebFontCSS(node, options);\n}\n//# sourceMappingURL=index.js.map"],"names":["resolveUrl","url","baseUrl","doc","base","a","uuid","counter","random","toArray","arrayLike","arr","i","l","styleProps","getStyleProperties","options","px","node","styleProperty","val","getNodeWidth","leftBorder","rightBorder","getNodeHeight","topBorder","bottomBorder","getImageSize","targetNode","width","height","getPixelRatio","ratio","FINAL_PROCESS","canvasDimensionLimit","checkCanvasDimensions","canvas","createImage","resolve","reject","img","svgToDataURL","svg","html","nodeToDataURL","xmlns","foreignObject","isInstanceOfElement","instance","nodePrototype","formatCSSText","style","content","formatCSSProperties","name","value","priority","getPseudoElementStyle","className","pseudo","selector","cssText","clonePseudoElement","nativeNode","clonedNode","styleElement","clonePseudoElements","WOFF","JPEG","mimes","getExtension","match","getMimeType","extension","getContentFromDataUrl","dataURL","isDataUrl","makeDataUrl","mimeType","fetchAsDataURL","init","process","res","blob","reader","error","cache","getCacheKey","contentType","includeQueryParams","key","resourceToDataURL","resourceUrl","cacheKey","result","msg","cloneCanvasElement","cloneVideoElement","video","ctx","poster","cloneIFrameElement","iframe","_a","cloneNode","cloneSingleNode","isSVGElement","isSlotElement","cloneChildren","_b","children","deferred","child","clonedChild","cloneCSSStyle","targetStyle","sourceStyle","cloneInputValue","cloneSelectValue","clonedSelect","selectedOption","decorate","ensureSVGSymbols","clone","uses","processedDefs","id","exist","definition","nodes","ns","defs","isRoot","URL_REGEX","URL_WITH_FORMAT_REGEX","FONT_SRC_REGEX","toRegex","escaped","parseURLs","urls","raw","quotation","embed","resourceURL","baseURL","getContentFromUrl","resolvedURL","filterPreferredFontFormat","str","preferredFontFormat","src","format","shouldEmbed","embedResources","filteredCSSText","css","embedProp","propName","propValue","cssString","embedBackground","embedImageNode","isImageElement","attributes","image","embedChildren","deferreds","embedImages","applyStyle","manual","cssFetchCache","fetchCSS","embedFonts","data","regexUrl","loadFonts","loc","parseCSS","source","commentsRegex","keyframesRegex","matches","importRegex","combinedCSSRegex","unifiedRegex","getCSSRules","styleSheets","ret","sheet","item","index","importIndex","metadata","rule","e","inline","err","getWebFontRules","cssRules","parseWebFontRules","normalizeFontFamily","font","getUsedFonts","fonts","traverse","getWebFontCSS","rules","usedFonts","embedWebFonts","styleNode","sytleContent","toSvg","toCanvas","context","canvasWidth","canvasHeight","toPng"],"mappings":"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","x_google_ignoreList":[0,1,2,3,4,5,6,7,8,9]}